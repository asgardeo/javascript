/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Key pair generation options
 */
export interface KeyPairOptions {
  keySize?: 2048 | 4096;
  algorithm?: 'RSA' | 'ECDSA';
  curve?: 'P-256' | 'P-384' | 'P-521'; // For ECDSA
  commonName?: string;
  organization?: string;
  country?: string;
  validityDays?: number;
}

/**
 * Generated key pair result
 */
export interface GeneratedKeyPair {
  certificate: string;
  privateKey: string;
  publicKey: string;
  fingerprint: string;
}

/**
 * Private certificate data stored securely by device ID
 */
export interface PrivateCert {
  deviceId: string;
  certificate: string;
  privateKey: string;
  publicKey?: string;
  fingerprint?: string;
  keySize?: number;
  algorithm?: string;
  createdAt: Date;
  expiresAt?: Date;
  generatedByApp?: boolean; // Flag to indicate if generated by the app
}

/**
 * TOTP secret data stored securely by issuer and username combination
 */
export interface TotpSecret {
  issuer: string;
  username: string;
  secret: string;
  algorithm?: 'SHA1' | 'SHA256' | 'SHA512';
  digits?: number;
  period?: number;
  createdAt: Date;
}

/**
 * Account details stored in regular storage for display purposes
 */
export interface AccountDetails {
  id: string; // Unique identifier for the account
  username: string;
  organization: string;
  issuer: string;
  lastLoginAt?: Date;
  registeredAt: Date;
  isActive: boolean;
  accountType: 'push' | 'totp' | 'both';
}

/**
 * Storage keys for different data types
 */
export const StorageKeys = {
  // Secure storage keys
  PRIVATE_CERT_PREFIX: 'private_cert_',
  CERTIFICATE_PREFIX: 'certificate_',
  PRIVATE_KEY_PREFIX: 'private_key_',
  PUBLIC_KEY_PREFIX: 'public_key_',
  KEYPAIR_METADATA_PREFIX: 'keypair_meta_',
  TOTP_SECRET_PREFIX: 'totp_secret_',

  // Regular storage keys
  ACCOUNT_DETAILS: 'account_details',
  REGISTERED_ACCOUNTS: 'registered_accounts',
} as const;

/**
 * Helper type for storage key prefixes
 */
export type StorageKeyPrefix = typeof StorageKeys[keyof typeof StorageKeys];

/**
 * Utility functions for generating storage keys
 */
export const generateStorageKey = {
  privateCert: (deviceId: string): string =>
    `${StorageKeys.PRIVATE_CERT_PREFIX}${deviceId}`,

  certificate: (deviceId: string): string =>
    `${StorageKeys.CERTIFICATE_PREFIX}${deviceId}`,

  privateKey: (deviceId: string): string =>
    `${StorageKeys.PRIVATE_KEY_PREFIX}${deviceId}`,

  publicKey: (deviceId: string): string =>
    `${StorageKeys.PUBLIC_KEY_PREFIX}${deviceId}`,

  keyPairMetadata: (deviceId: string): string =>
    `${StorageKeys.KEYPAIR_METADATA_PREFIX}${deviceId}`,

  totpSecret: (issuer: string, username: string): string =>
    `${StorageKeys.TOTP_SECRET_PREFIX}${issuer}_${username}`,

  accountDetails: (): string =>
    StorageKeys.ACCOUNT_DETAILS,
};
