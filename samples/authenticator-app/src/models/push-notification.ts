/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

export interface PushCommonDataInterface {
  /**
   * The username of the user trying to register a device.
   */
  username: string;
  /**
   * The tenant domain of the user trying to register a device.
   */
  tenantDomain: string;
  /**
   * Organization ID of an organization user.
   */
  organizationId?: string;
  /**
   * Organization name of an organization user.
   */
  organizationName?: string;
  /**
   * A unique identifier generated by WSO2 Identity Server to identify the device.
   */
  deviceId: string;
  /**
   * A UUID to be signed by the push authentication application.
   */
  challenge: string;
}

/**
 * Interface representing the expected structure of QR code data for push notification registration.
 */
export interface PushNotificationQRDataInterface extends PushCommonDataInterface {
  /**
   * The host of the WSO2 Identity Server server.
   */
  host: string;
}

export interface PushAuthenticationDataInterface extends PushCommonDataInterface {
  /**
   * Userstore domain of the user.
   */
  userStoreDomain: string;
  /**
   * Name of the application user is trying to authenticate.
   */
  applicationName: string;
  /**
   * The scenario purpose of the push notification (Example: AUTHENTICATION).
   */
  notificationScenario: string;
  /**
   * Unique identifier to identify the push authentication flow related to the push notification.
   */
  pushId: string;
  /**
   * A UUID value that has to be sent back with the authentication request for verification.
   */
  challenge: string;
  /**
   * A number between 1 and 100 generated to add additional security over the challenge.
   */
  numberChallenge?: string;
  /**
   * IP address of the user trying to authenticate.
   */
  ipAddress: string;
  /**
   * Operating system of the device.
   */
  deviceOS: string;
  /**
   * Browser used by the user.
   */
  browser: string;
  /**
   * Time when the push notification was sent in milliseconds since epoch.
   */
  sentTime: number;
}

/**
 * Enum for push authentication response statuses.
 */
export enum PushAuthResponseStatus {
  APPROVED = "APPROVED",
  DENIED = "DENIED"
}

export interface PushAuthJWTHeaderInterface {
  /**
   * The type of the token, which is JWT.
   */
  typ: string;
  /**
   * The signing algorithm used.
   */
  alg: string;
  /**
   * The device identifier.
   */
  deviceId: string;
}

export interface PushAuthJWTBodyInterface {
  /**
   * Unique identifier to identify the push authentication flow related to the push notification.
   */
  pushAuthId: string;
  /**
   * The challenge received in the push notification to be sent back for verification.
   */
  challenge: string;
  /**
   * The response status of the push authentication request.
   */
  response: PushAuthResponseStatus;
  /**
   * A number between 1 and 100 generated to add additional security over the challenge.
   */
  numberChallenge?: string;
  /**
   * Expiry time of the JWT in milliseconds since epoch.
   */
  exp: number;
}
